// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieSystem.Infrastructure.Database;

#nullable disable

namespace MovieSystem.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MoviesSystem.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(147),
                            Description = "Cartoon Category",
                            IsDeleted = false,
                            Name = "Cartoon"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(217),
                            Description = "Action Category",
                            IsDeleted = false,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(225),
                            Description = "Adventure Category",
                            IsDeleted = false,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(231),
                            Description = "Comedy Category",
                            IsDeleted = false,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(244),
                            Description = "Horror Category",
                            IsDeleted = false,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(268),
                            Description = "Romance Category",
                            IsDeleted = false,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(285),
                            Description = "Science fiction Category",
                            IsDeleted = false,
                            Name = "Science fiction"
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(302),
                            Description = "Fantasy Category",
                            IsDeleted = false,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(315),
                            Description = "Historical Category",
                            IsDeleted = false,
                            Name = "Historical"
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(325),
                            Description = "Musical Category",
                            IsDeleted = false,
                            Name = "Musical"
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(332),
                            Description = "Drama Category",
                            IsDeleted = false,
                            Name = "Drama"
                        });
                });

            modelBuilder.Entity("MoviesSystem.Domain.Entities.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MoviesSystem.Domain.Entities.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LikeValue")
                        .HasColumnType("bit");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId", "MovieId")
                        .IsUnique();

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("MoviesSystem.Domain.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MovieDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("MovieImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MovieTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionYear")
                        .HasColumnType("int");

                    b.Property<int?>("RecommendedAge")
                        .HasColumnType("int");

                    b.Property<string>("TrillerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MovieTypeId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "USA",
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(370),
                            Duration = 120,
                            IsDeleted = false,
                            MovieDescription = "UP Pabbrt 1 Cartoon",
                            MovieName = "UP",
                            ProductionYear = 2006,
                            RecommendedAge = 10,
                            TypeId = 1,
                            VideoUrl = "www.youtube.com"
                        },
                        new
                        {
                            Id = 2,
                            Country = "USA",
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(386),
                            Duration = 120,
                            IsDeleted = false,
                            MovieDescription = "Zootopia Part 1 Cartoon",
                            MovieName = "Zootopia",
                            ProductionYear = 2010,
                            RecommendedAge = 10,
                            TypeId = 2,
                            VideoUrl = "www.youtube.com"
                        },
                        new
                        {
                            Id = 3,
                            Country = "USA",
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(394),
                            Duration = 120,
                            IsDeleted = false,
                            MovieDescription = "Sing Part 1 Cartoon",
                            MovieName = "Sing 1",
                            ProductionYear = 2015,
                            RecommendedAge = 12,
                            TypeId = 1,
                            VideoUrl = "www.youtube.com"
                        },
                        new
                        {
                            Id = 4,
                            Country = "USA",
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(401),
                            Duration = 120,
                            IsDeleted = false,
                            MovieDescription = "Sing Part 2 Cartoon",
                            MovieName = "Sing 2",
                            ProductionYear = 2015,
                            RecommendedAge = 12,
                            TypeId = 1,
                            VideoUrl = "www.youtube.com"
                        },
                        new
                        {
                            Id = 5,
                            Country = "USA",
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(407),
                            Duration = 120,
                            IsDeleted = false,
                            MovieDescription = "Titanic Part 1 Movie",
                            MovieName = "Titanic",
                            ProductionYear = 2000,
                            RecommendedAge = 15,
                            TypeId = 2,
                            VideoUrl = "www.youtube.com"
                        });
                });

            modelBuilder.Entity("MoviesSystem.Domain.Entities.MovieCategory", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("MovieId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MovieId", "CategoryId")
                        .IsUnique();

                    b.ToTable("MovieCategorys");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            CategoryId = 1,
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(447),
                            Id = 0,
                            IsDeleted = false
                        },
                        new
                        {
                            MovieId = 1,
                            CategoryId = 3,
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(474),
                            Id = 0,
                            IsDeleted = false
                        },
                        new
                        {
                            MovieId = 2,
                            CategoryId = 1,
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(480),
                            Id = 0,
                            IsDeleted = false
                        },
                        new
                        {
                            MovieId = 2,
                            CategoryId = 2,
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(485),
                            Id = 0,
                            IsDeleted = false
                        },
                        new
                        {
                            MovieId = 2,
                            CategoryId = 3,
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(490),
                            Id = 0,
                            IsDeleted = false
                        },
                        new
                        {
                            MovieId = 2,
                            CategoryId = 11,
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(500),
                            Id = 0,
                            IsDeleted = false
                        },
                        new
                        {
                            MovieId = 3,
                            CategoryId = 1,
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(505),
                            Id = 0,
                            IsDeleted = false
                        },
                        new
                        {
                            MovieId = 3,
                            CategoryId = 11,
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(968),
                            Id = 0,
                            IsDeleted = false
                        },
                        new
                        {
                            MovieId = 3,
                            CategoryId = 6,
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(1006),
                            Id = 0,
                            IsDeleted = false
                        },
                        new
                        {
                            MovieId = 4,
                            CategoryId = 1,
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(1024),
                            Id = 0,
                            IsDeleted = false
                        },
                        new
                        {
                            MovieId = 4,
                            CategoryId = 11,
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(1031),
                            Id = 0,
                            IsDeleted = false
                        },
                        new
                        {
                            MovieId = 4,
                            CategoryId = 6,
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(1038),
                            Id = 0,
                            IsDeleted = false
                        },
                        new
                        {
                            MovieId = 5,
                            CategoryId = 2,
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(1044),
                            Id = 0,
                            IsDeleted = false
                        },
                        new
                        {
                            MovieId = 5,
                            CategoryId = 11,
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(1049),
                            Id = 0,
                            IsDeleted = false
                        },
                        new
                        {
                            MovieId = 5,
                            CategoryId = 6,
                            DateCreated = new DateTime(2023, 10, 16, 19, 47, 51, 127, DateTimeKind.Local).AddTicks(1054),
                            Id = 0,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("MoviesSystem.Domain.Entities.MovieType", b =>
                {
                    b.Property<int>("MovieTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieTypeId"));

                    b.Property<string>("MovieTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieTypeId");

                    b.ToTable("MovieTypes");

                    b.HasData(
                        new
                        {
                            MovieTypeId = 1,
                            MovieTypeName = "Free"
                        },
                        new
                        {
                            MovieTypeId = 2,
                            MovieTypeName = "Paid"
                        });
                });

            modelBuilder.Entity("MoviesSystem.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("MoviesSystem.Domain.Entities.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("RateValue")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId", "MovieId")
                        .IsUnique();

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("MoviesSystem.Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("MoviesSystem.Domain.Entities.SubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("SubscripsionPlans");
                });

            modelBuilder.Entity("MoviesSystem.Domain.Entities.UserSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("Paymentd")
                        .HasColumnType("int");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSubscriptions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MoviesSystem.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MoviesSystem.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviesSystem.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MoviesSystem.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoviesSystem.Domain.Entities.Like", b =>
                {
                    b.HasOne("MoviesSystem.Domain.Entities.Movie", "Movie")
                        .WithMany("Likes")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviesSystem.Domain.Entities.Identity.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoviesSystem.Domain.Entities.Movie", b =>
                {
                    b.HasOne("MoviesSystem.Domain.Entities.MovieType", "MovieType")
                        .WithMany("Movies")
                        .HasForeignKey("MovieTypeId");

                    b.Navigation("MovieType");
                });

            modelBuilder.Entity("MoviesSystem.Domain.Entities.MovieCategory", b =>
                {
                    b.HasOne("MoviesSystem.Domain.Entities.Category", "Category")
                        .WithMany("MovieCategorys")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviesSystem.Domain.Entities.Movie", "Movie")
                        .WithMany("MovieCategorys")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MoviesSystem.Domain.Entities.Rate", b =>
                {
                    b.HasOne("MoviesSystem.Domain.Entities.Movie", "Movie")
                        .WithMany("Rates")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviesSystem.Domain.Entities.Identity.User", "User")
                        .WithMany("Rates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoviesSystem.Domain.Entities.Review", b =>
                {
                    b.HasOne("MoviesSystem.Domain.Entities.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviesSystem.Domain.Entities.Identity.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoviesSystem.Domain.Entities.UserSubscription", b =>
                {
                    b.HasOne("MoviesSystem.Domain.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId");

                    b.HasOne("MoviesSystem.Domain.Entities.SubscriptionPlan", "Plan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviesSystem.Domain.Entities.Identity.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoviesSystem.Domain.Entities.Category", b =>
                {
                    b.Navigation("MovieCategorys");
                });

            modelBuilder.Entity("MoviesSystem.Domain.Entities.Identity.User", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Rates");

                    b.Navigation("Reviews");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("MoviesSystem.Domain.Entities.Movie", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("MovieCategorys");

                    b.Navigation("Rates");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MoviesSystem.Domain.Entities.MovieType", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("MoviesSystem.Domain.Entities.SubscriptionPlan", b =>
                {
                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
